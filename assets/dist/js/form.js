!function(t){function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}var e={};return r.m=t,r.c=e,r.i=function(t){return t},r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},r.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},r.p="",r(r.s=3)}([function(t,r,e){"use strict";e(2),function(t){t(document).on("ready",function(){t(".rbp-support-form").length<=0||(t("form.rbp-support-form").on("submit",function(r){var e=t(this),i=e.find('input[type="submit"]');i.prop("disabled",!0),e[0].reportValidity(),e[0].checkValidity()&&e.find(".submit-hidden").attr("disabled",!1)}),t(".rbp-support-form.javascript-interrupt").length<=0||t("form").on("submit",function(r){var e=t(".rbp-support-form.javascript-interrupt").find('input[type="submit"]');if(console.log(e),t(document.activeElement).attr("name").indexOf("_rbp_support_submit")>-1){e.attr("disabled",!0);var i=t(this);t(this).find(".required").each(function(r,e){t(e).attr("required",!0)}),i[0].reportValidity(),i[0].checkValidity()?i.find(".submit-hidden").attr("disabled",!1):(r.preventDefault(),setTimeout(function(){i.find(".required").each(function(r,e){t(e).attr("required",!1)}),e.attr("disabled",!1)},2e3))}}))})}(jQuery)},,function(t,r,e){"use strict";HTMLFormElement.prototype.reportValidity||jQuery(".rbp-support-form").length>0&&(HTMLFormElement.prototype.reportValidity=function(){var t;t=jQuery(this).hasClass("rbp-support-form")?jQuery(this):jQuery(this).find(".rbp-support-form");var r=t.data("prefix"),e=window[r+"_support_form"],i=e.validationError,n=!0;return jQuery(this).find(".validation-error").remove(),jQuery(this).find(".required").each(function(t,r){r.setCustomValidity(""),jQuery(r).closest("td").hasClass("hidden")||null!==jQuery(r).val()&&""!=jQuery(r).val()||(r.setCustomValidity(i),jQuery(r).before('<span class="validation-error">'+i+"</span>"),n=!1)}),n?n:(jQuery(this).closest("body").scrollTop(jQuery(this).find(".validation-error:first-of-type")),n)})},function(t,r,e){t.exports=e(0)}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
